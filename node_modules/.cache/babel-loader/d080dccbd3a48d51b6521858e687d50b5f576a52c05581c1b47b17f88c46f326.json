{"ast":null,"code":"import _objectSpread from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectDestructuringEmpty from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nimport _classCallCheck from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateMethodGet from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldGet from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Users/mo7am/OneDrive/Desktop/AnimeU-main/AnimeU-main/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _client, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, _executeFetch, _updateStaleTimeout, _computeRefetchInterval, _updateRefetchInterval, _updateTimers, _clearStaleTimeout, _clearRefetchInterval, _updateQuery, _notify;\n// src/queryObserver.ts\nimport { isServer, isValidTimeout, noop, replaceData, resolveEnabled, resolveStaleTime, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { fetchState } from \"./query.js\";\nvar QueryObserver = (_client = /*#__PURE__*/new WeakMap(), _currentQuery = /*#__PURE__*/new WeakMap(), _currentQueryInitialState = /*#__PURE__*/new WeakMap(), _currentResult = /*#__PURE__*/new WeakMap(), _currentResultState = /*#__PURE__*/new WeakMap(), _currentResultOptions = /*#__PURE__*/new WeakMap(), _selectError = /*#__PURE__*/new WeakMap(), _selectFn = /*#__PURE__*/new WeakMap(), _selectResult = /*#__PURE__*/new WeakMap(), _lastQueryWithDefinedData = /*#__PURE__*/new WeakMap(), _staleTimeoutId = /*#__PURE__*/new WeakMap(), _refetchIntervalId = /*#__PURE__*/new WeakMap(), _currentRefetchInterval = /*#__PURE__*/new WeakMap(), _trackedProps = /*#__PURE__*/new WeakMap(), _executeFetch = /*#__PURE__*/new WeakSet(), _updateStaleTimeout = /*#__PURE__*/new WeakSet(), _computeRefetchInterval = /*#__PURE__*/new WeakSet(), _updateRefetchInterval = /*#__PURE__*/new WeakSet(), _updateTimers = /*#__PURE__*/new WeakSet(), _clearStaleTimeout = /*#__PURE__*/new WeakSet(), _clearRefetchInterval = /*#__PURE__*/new WeakSet(), _updateQuery = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueryObserver, _Subscribable);\n  var _super = _createSuper(QueryObserver);\n  function QueryObserver(client, options) {\n    var _this;\n    _classCallCheck(this, QueryObserver);\n    _this = _super.call(this);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _notify);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateQuery);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _clearRefetchInterval);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _clearStaleTimeout);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateTimers);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateRefetchInterval);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _computeRefetchInterval);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _updateStaleTimeout);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _executeFetch);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _client, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentQuery, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentQueryInitialState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResult, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResultState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentResultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _selectError, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _selectFn, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _selectResult, {\n      writable: true,\n      value: void 0\n    });\n    // This property keeps track of the last query with defined data.\n    // It will be used to pass the previous data and query to the placeholder function between renders.\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _lastQueryWithDefinedData, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _staleTimeoutId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _refetchIntervalId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _currentRefetchInterval, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _trackedProps, {\n      writable: true,\n      value: /* @__PURE__ */new Set()\n    });\n    _this.options = options;\n    _classPrivateFieldSet(_assertThisInitialized(_this), _client, client);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _selectError, null);\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(this, _currentQuery).addObserver(this);\n        if (shouldFetchOnMount(_classPrivateFieldGet(this, _currentQuery), this.options)) {\n          _classPrivateMethodGet(this, _executeFetch, _executeFetch2).call(this);\n        } else {\n          this.updateResult();\n        }\n        _classPrivateMethodGet(this, _updateTimers, _updateTimers2).call(this);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(_classPrivateFieldGet(this, _currentQuery), this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(_classPrivateFieldGet(this, _currentQuery), this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n      _classPrivateMethodGet(this, _clearStaleTimeout, _clearStaleTimeout2).call(this);\n      _classPrivateMethodGet(this, _clearRefetchInterval, _clearRefetchInterval2).call(this);\n      _classPrivateFieldGet(this, _currentQuery).removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, notifyOptions) {\n      var prevOptions = this.options;\n      var prevQuery = _classPrivateFieldGet(this, _currentQuery);\n      this.options = _classPrivateFieldGet(this, _client).defaultQueryOptions(options);\n      if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, _classPrivateFieldGet(this, _currentQuery)) !== \"boolean\") {\n        throw new Error(\"Expected enabled to be a boolean or a callback that returns a boolean\");\n      }\n      _classPrivateMethodGet(this, _updateQuery, _updateQuery2).call(this);\n      _classPrivateFieldGet(this, _currentQuery).setOptions(this.options);\n      if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n        _classPrivateFieldGet(this, _client).getQueryCache().notify({\n          type: \"observerOptionsUpdated\",\n          query: _classPrivateFieldGet(this, _currentQuery),\n          observer: this\n        });\n      }\n      var mounted = this.hasListeners();\n      if (mounted && shouldFetchOptionally(_classPrivateFieldGet(this, _currentQuery), prevQuery, this.options, prevOptions)) {\n        _classPrivateMethodGet(this, _executeFetch, _executeFetch2).call(this);\n      }\n      this.updateResult(notifyOptions);\n      if (mounted && (_classPrivateFieldGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, _classPrivateFieldGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, _classPrivateFieldGet(this, _currentQuery)) || resolveStaleTime(this.options.staleTime, _classPrivateFieldGet(this, _currentQuery)) !== resolveStaleTime(prevOptions.staleTime, _classPrivateFieldGet(this, _currentQuery)))) {\n        _classPrivateMethodGet(this, _updateStaleTimeout, _updateStaleTimeout2).call(this);\n      }\n      var nextRefetchInterval = _classPrivateMethodGet(this, _computeRefetchInterval, _computeRefetchInterval2).call(this);\n      if (mounted && (_classPrivateFieldGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, _classPrivateFieldGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, _classPrivateFieldGet(this, _currentQuery)) || nextRefetchInterval !== _classPrivateFieldGet(this, _currentRefetchInterval))) {\n        _classPrivateMethodGet(this, _updateRefetchInterval, _updateRefetchInterval2).call(this, nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = _classPrivateFieldGet(this, _client).getQueryCache().build(_classPrivateFieldGet(this, _client), options);\n      var result = this.createResult(query, options);\n      if (shouldAssignObserverCurrentProperties(this, result)) {\n        _classPrivateFieldSet(this, _currentResult, result);\n        _classPrivateFieldSet(this, _currentResultOptions, this.options);\n        _classPrivateFieldSet(this, _currentResultState, _classPrivateFieldGet(this, _currentQuery).state);\n      }\n      return result;\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(this, _currentResult);\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result, onPropTracked) {\n      var _this2 = this;\n      var trackedResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(trackedResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            _this2.trackProp(key);\n            onPropTracked === null || onPropTracked === void 0 ? void 0 : onPropTracked(key);\n            return result[key];\n          }\n        });\n      });\n      return trackedResult;\n    }\n  }, {\n    key: \"trackProp\",\n    value: function trackProp(key) {\n      _classPrivateFieldGet(this, _trackedProps).add(key);\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return _classPrivateFieldGet(this, _currentQuery);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        options = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n      return this.fetch(_objectSpread({}, options));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n      var defaultedOptions = _classPrivateFieldGet(this, _client).defaultQueryOptions(options);\n      var query = _classPrivateFieldGet(this, _client).getQueryCache().build(_classPrivateFieldGet(this, _client), defaultedOptions);\n      query.isFetchingOptimistic = true;\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _fetchOptions$cancelR,\n        _this4 = this;\n      return _classPrivateMethodGet(this, _executeFetch, _executeFetch2).call(this, _objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) !== null && _fetchOptions$cancelR !== void 0 ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n        return _classPrivateFieldGet(_this4, _currentResult);\n      });\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var prevQuery = _classPrivateFieldGet(this, _currentQuery);\n      var prevOptions = this.options;\n      var prevResult = _classPrivateFieldGet(this, _currentResult);\n      var prevResultState = _classPrivateFieldGet(this, _currentResultState);\n      var prevResultOptions = _classPrivateFieldGet(this, _currentResultOptions);\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : _classPrivateFieldGet(this, _currentQueryInitialState);\n      var state = query.state;\n      var newState = _objectSpread({}, state);\n      var isPlaceholderData = false;\n      var data;\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n        if (fetchOnMount || fetchOptionally) {\n          newState = _objectSpread(_objectSpread({}, newState), fetchState(state.data, query.options));\n        }\n        if (options._optimisticResults === \"isRestoring\") {\n          newState.fetchStatus = \"idle\";\n        }\n      }\n      var _newState = newState,\n        error = _newState.error,\n        errorUpdatedAt = _newState.errorUpdatedAt,\n        status = _newState.status;\n      if (options.select && newState.data !== void 0) {\n        if (prevResult && newState.data === (prevResultState === null || prevResultState === void 0 ? void 0 : prevResultState.data) && options.select === _classPrivateFieldGet(this, _selectFn)) {\n          data = _classPrivateFieldGet(this, _selectResult);\n        } else {\n          try {\n            _classPrivateFieldSet(this, _selectFn, options.select);\n            data = options.select(newState.data);\n            data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, data, options);\n            _classPrivateFieldSet(this, _selectResult, data);\n            _classPrivateFieldSet(this, _selectError, null);\n          } catch (selectError) {\n            _classPrivateFieldSet(this, _selectError, selectError);\n          }\n        }\n      } else {\n        data = newState.data;\n      }\n      if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n        var placeholderData;\n        if (prevResult !== null && prevResult !== void 0 && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions === null || prevResultOptions === void 0 ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n        } else {\n          var _classPrivateFieldGet2;\n          placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _lastQueryWithDefinedData)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.state.data, _classPrivateFieldGet(this, _lastQueryWithDefinedData)) : options.placeholderData;\n          if (options.select && placeholderData !== void 0) {\n            try {\n              placeholderData = options.select(placeholderData);\n              _classPrivateFieldSet(this, _selectError, null);\n            } catch (selectError) {\n              _classPrivateFieldSet(this, _selectError, selectError);\n            }\n          }\n        }\n        if (placeholderData !== void 0) {\n          status = \"success\";\n          data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, placeholderData, options);\n          isPlaceholderData = true;\n        }\n      }\n      if (_classPrivateFieldGet(this, _selectError)) {\n        error = _classPrivateFieldGet(this, _selectError);\n        data = _classPrivateFieldGet(this, _selectResult);\n        errorUpdatedAt = Date.now();\n        status = \"error\";\n      }\n      var isFetching = newState.fetchStatus === \"fetching\";\n      var isPending = status === \"pending\";\n      var isError = status === \"error\";\n      var isLoading = isPending && isFetching;\n      var hasData = data !== void 0;\n      var result = {\n        status: status,\n        fetchStatus: newState.fetchStatus,\n        isPending: isPending,\n        isSuccess: status === \"success\",\n        isError: isError,\n        isInitialLoading: isLoading,\n        isLoading: isLoading,\n        data: data,\n        dataUpdatedAt: newState.dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: newState.fetchFailureCount,\n        failureReason: newState.fetchFailureReason,\n        errorUpdateCount: newState.errorUpdateCount,\n        isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n        isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && !isPending,\n        isLoadingError: isError && !hasData,\n        isPaused: newState.fetchStatus === \"paused\",\n        isPlaceholderData: isPlaceholderData,\n        isRefetchError: isError && hasData,\n        isStale: isStale(query, options),\n        refetch: this.refetch\n      };\n      return result;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult(notifyOptions) {\n      var _this5 = this;\n      var prevResult = _classPrivateFieldGet(this, _currentResult);\n      var nextResult = this.createResult(_classPrivateFieldGet(this, _currentQuery), this.options);\n      _classPrivateFieldSet(this, _currentResultState, _classPrivateFieldGet(this, _currentQuery).state);\n      _classPrivateFieldSet(this, _currentResultOptions, this.options);\n      if (_classPrivateFieldGet(this, _currentResultState).data !== void 0) {\n        _classPrivateFieldSet(this, _lastQueryWithDefinedData, _classPrivateFieldGet(this, _currentQuery));\n      }\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _currentResult, nextResult);\n      var defaultNotifyOptions = {};\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n        var notifyOnChangeProps = _this5.options.notifyOnChangeProps;\n        var notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n        if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !_classPrivateFieldGet(_this5, _trackedProps).size) {\n          return true;\n        }\n        var includedProps = new Set(notifyOnChangePropsValue !== null && notifyOnChangePropsValue !== void 0 ? notifyOnChangePropsValue : _classPrivateFieldGet(_this5, _trackedProps));\n        if (_this5.options.throwOnError) {\n          includedProps.add(\"error\");\n        }\n        return Object.keys(_classPrivateFieldGet(_this5, _currentResult)).some(function (key) {\n          var typedKey = key;\n          var changed = _classPrivateFieldGet(_this5, _currentResult)[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n      if ((notifyOptions === null || notifyOptions === void 0 ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n        defaultNotifyOptions.listeners = true;\n      }\n      _classPrivateMethodGet(this, _notify, _notify2).call(this, _objectSpread(_objectSpread({}, defaultNotifyOptions), notifyOptions));\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate() {\n      this.updateResult();\n      if (this.hasListeners()) {\n        _classPrivateMethodGet(this, _updateTimers, _updateTimers2).call(this);\n      }\n    }\n  }]);\n  return QueryObserver;\n}(Subscribable));\nfunction _executeFetch2(fetchOptions) {\n  _classPrivateMethodGet(this, _updateQuery, _updateQuery2).call(this);\n  var promise = _classPrivateFieldGet(this, _currentQuery).fetch(this.options, fetchOptions);\n  if (!(fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.throwOnError)) {\n    promise = promise.catch(noop);\n  }\n  return promise;\n}\nfunction _updateStaleTimeout2() {\n  var _this6 = this;\n  _classPrivateMethodGet(this, _clearStaleTimeout, _clearStaleTimeout2).call(this);\n  var staleTime = resolveStaleTime(this.options.staleTime, _classPrivateFieldGet(this, _currentQuery));\n  if (isServer || _classPrivateFieldGet(this, _currentResult).isStale || !isValidTimeout(staleTime)) {\n    return;\n  }\n  var time = timeUntilStale(_classPrivateFieldGet(this, _currentResult).dataUpdatedAt, staleTime);\n  var timeout = time + 1;\n  _classPrivateFieldSet(this, _staleTimeoutId, setTimeout(function () {\n    if (!_classPrivateFieldGet(_this6, _currentResult).isStale) {\n      _this6.updateResult();\n    }\n  }, timeout));\n}\nfunction _computeRefetchInterval2() {\n  var _ref2;\n  return (_ref2 = typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(_classPrivateFieldGet(this, _currentQuery)) : this.options.refetchInterval) !== null && _ref2 !== void 0 ? _ref2 : false;\n}\nfunction _updateRefetchInterval2(nextInterval) {\n  var _this7 = this;\n  _classPrivateMethodGet(this, _clearRefetchInterval, _clearRefetchInterval2).call(this);\n  _classPrivateFieldSet(this, _currentRefetchInterval, nextInterval);\n  if (isServer || resolveEnabled(this.options.enabled, _classPrivateFieldGet(this, _currentQuery)) === false || !isValidTimeout(_classPrivateFieldGet(this, _currentRefetchInterval)) || _classPrivateFieldGet(this, _currentRefetchInterval) === 0) {\n    return;\n  }\n  _classPrivateFieldSet(this, _refetchIntervalId, setInterval(function () {\n    if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n      _classPrivateMethodGet(_this7, _executeFetch, _executeFetch2).call(_this7);\n    }\n  }, _classPrivateFieldGet(this, _currentRefetchInterval)));\n}\nfunction _updateTimers2() {\n  _classPrivateMethodGet(this, _updateStaleTimeout, _updateStaleTimeout2).call(this);\n  _classPrivateMethodGet(this, _updateRefetchInterval, _updateRefetchInterval2).call(this, _classPrivateMethodGet(this, _computeRefetchInterval, _computeRefetchInterval2).call(this));\n}\nfunction _clearStaleTimeout2() {\n  if (_classPrivateFieldGet(this, _staleTimeoutId)) {\n    clearTimeout(_classPrivateFieldGet(this, _staleTimeoutId));\n    _classPrivateFieldSet(this, _staleTimeoutId, void 0);\n  }\n}\nfunction _clearRefetchInterval2() {\n  if (_classPrivateFieldGet(this, _refetchIntervalId)) {\n    clearInterval(_classPrivateFieldGet(this, _refetchIntervalId));\n    _classPrivateFieldSet(this, _refetchIntervalId, void 0);\n  }\n}\nfunction _updateQuery2() {\n  var query = _classPrivateFieldGet(this, _client).getQueryCache().build(_classPrivateFieldGet(this, _client), this.options);\n  if (query === _classPrivateFieldGet(this, _currentQuery)) {\n    return;\n  }\n  var prevQuery = _classPrivateFieldGet(this, _currentQuery);\n  _classPrivateFieldSet(this, _currentQuery, query);\n  _classPrivateFieldSet(this, _currentQueryInitialState, query.state);\n  if (this.hasListeners()) {\n    prevQuery === null || prevQuery === void 0 ? void 0 : prevQuery.removeObserver(this);\n    query.addObserver(this);\n  }\n}\nfunction _notify2(notifyOptions) {\n  var _this8 = this;\n  notifyManager.batch(function () {\n    if (notifyOptions.listeners) {\n      _this8.listeners.forEach(function (listener) {\n        listener(_classPrivateFieldGet(_this8, _currentResult));\n      });\n    }\n    _classPrivateFieldGet(_this8, _client).getQueryCache().notify({\n      query: _classPrivateFieldGet(_this8, _currentQuery),\n      type: \"observerResultsUpdated\"\n    });\n  });\n}\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    var value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["isServer","isValidTimeout","noop","replaceData","resolveEnabled","resolveStaleTime","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","fetchState","QueryObserver","_client","WeakMap","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","_executeFetch","WeakSet","_updateStaleTimeout","_computeRefetchInterval","_updateRefetchInterval","_updateTimers","_clearStaleTimeout","_clearRefetchInterval","_updateQuery","_notify","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","Set","_classPrivateFieldSet","bindMethods","setOptions","_createClass","key","refetch","bind","onSubscribe","listeners","size","_classPrivateFieldGet","addObserver","shouldFetchOnMount","_classPrivateMethodGet","_executeFetch2","updateResult","_updateTimers2","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout2","_clearRefetchInterval2","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","Error","_updateQuery2","_defaulted","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","staleTime","_updateStaleTimeout2","nextRefetchInterval","_computeRefetchInterval2","_updateRefetchInterval2","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","onPropTracked","_this2","trackedResult","Object","keys","forEach","defineProperty","configurable","enumerable","get","trackProp","add","getCurrentQuery","_ref","arguments","length","undefined","assign","_objectDestructuringEmpty","fetch","_objectSpread","fetchOptimistic","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","newState","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","fetchStatus","_newState","error","errorUpdatedAt","status","select","selectError","placeholderData","_classPrivateFieldGet2","Date","now","isFetching","isPending","isError","isLoading","hasData","isSuccess","isInitialLoading","dataUpdatedAt","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","_this5","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","throwOnError","some","typedKey","changed","has","_notify2","onQueryUpdate","promise","catch","_this6","time","timeout","setTimeout","_ref2","refetchInterval","nextInterval","_this7","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","_this8","batch","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","suspense","isStaleByTime","optimisticResult"],"sources":["C:\\Users\\mo7am\\OneDrive\\Desktop\\AnimeU-main\\AnimeU-main\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { fetchState } from './query'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Select data if needed\n    if (options.select && newState.data !== undefined) {\n      // Memoize select result\n      if (\n        prevResult &&\n        newState.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(newState.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = newState.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && placeholderData !== undefined) {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}