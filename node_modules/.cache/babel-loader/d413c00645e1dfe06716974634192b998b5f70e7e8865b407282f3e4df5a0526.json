{"ast":null,"code":"// src/notifyManager.ts\nfunction createNotifyManager() {\n  var queue = [];\n  var transactions = 0;\n  var notifyFn = function notifyFn(callback) {\n    callback();\n  };\n  var batchNotifyFn = function batchNotifyFn(callback) {\n    callback();\n  };\n  var scheduleFn = function scheduleFn(cb) {\n    return setTimeout(cb, 0);\n  };\n  var setScheduler = function setScheduler(fn) {\n    scheduleFn = fn;\n  };\n  var batch = function batch(callback) {\n    var result;\n    transactions++;\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n      if (!transactions) {\n        flush();\n      }\n    }\n    return result;\n  };\n  var schedule = function schedule(callback) {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(function () {\n        notifyFn(callback);\n      });\n    }\n  };\n  var batchCalls = function batchCalls(callback) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n  var flush = function flush() {\n    var originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleFn(function () {\n        batchNotifyFn(function () {\n          originalQueue.forEach(function (callback) {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  var setNotifyFunction = function setNotifyFunction(fn) {\n    notifyFn = fn;\n  };\n  var setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    batchNotifyFn = fn;\n  };\n  return {\n    batch: batch,\n    batchCalls: batchCalls,\n    schedule: schedule,\n    setNotifyFunction: setNotifyFunction,\n    setBatchNotifyFunction: setBatchNotifyFunction,\n    setScheduler: setScheduler\n  };\n}\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","cb","setTimeout","setScheduler","fn","batch","result","flush","schedule","push","batchCalls","_len","arguments","length","args","Array","_key","apply","originalQueue","forEach","setNotifyFunction","setBatchNotifyFunction","notifyManager"],"sources":["C:\\Users\\mo7am\\OneDrive\\Desktop\\AnimeU-main\\AnimeU-main\\node_modules\\@tanstack\\query-core\\src\\notifyManager.ts"],"sourcesContent":["// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\n  const setScheduler = (fn: ScheduleFunction) => {\n    scheduleFn = fn\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Array<unknown>>(\n    callback: BatchCallsCallback<T>,\n  ): BatchCallsCallback<T> => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n    setScheduler,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"],"mappings":";AAYO,SAASA,oBAAA,EAAsB;EACpC,IAAIC,KAAA,GAA+B,EAAC;EACpC,IAAIC,YAAA,GAAe;EACnB,IAAIC,QAAA,GAA2B,SAAAA,SAACC,QAAA,EAAa;IAC3CA,QAAA,EAAS;EACX;EACA,IAAIC,aAAA,GAAqC,SAAAA,cAACD,QAAA,EAAyB;IACjEA,QAAA,EAAS;EACX;EACA,IAAIE,UAAA,GAA+B,SAAAA,WAACC,EAAA;IAAA,OAAOC,UAAA,CAAWD,EAAA,EAAI,CAAC;EAAA;EAE3D,IAAME,YAAA,GAAe,SAAfA,aAAgBC,EAAA,EAAyB;IAC7CJ,UAAA,GAAaI,EAAA;EACf;EAEA,IAAMC,KAAA,GAAQ,SAARA,MAAYP,QAAA,EAAyB;IACzC,IAAIQ,MAAA;IACJV,YAAA;IACA,IAAI;MACFU,MAAA,GAASR,QAAA,EAAS;IACpB,UAAE;MACAF,YAAA;MACA,IAAI,CAACA,YAAA,EAAc;QACjBW,KAAA,EAAM;MACR;IACF;IACA,OAAOD,MAAA;EACT;EAEA,IAAME,QAAA,GAAW,SAAXA,SAAYV,QAAA,EAAmC;IACnD,IAAIF,YAAA,EAAc;MAChBD,KAAA,CAAMc,IAAA,CAAKX,QAAQ;IACrB,OAAO;MACLE,UAAA,CAAW,YAAM;QACfH,QAAA,CAASC,QAAQ;MACnB,CAAC;IACH;EACF;EAKA,IAAMY,UAAA,GAAa,SAAbA,WACJZ,QAAA,EAC0B;IAC1B,OAAO,YAAa;MAAA,SAAAa,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MACTR,QAAA,CAAS,YAAM;QACbV,QAAA,CAAAmB,KAAA,SAAYH,IAAI;MAClB,CAAC;IACH;EACF;EAEA,IAAMP,KAAA,GAAQ,SAARA,MAAA,EAAoB;IACxB,IAAMW,aAAA,GAAgBvB,KAAA;IACtBA,KAAA,GAAQ,EAAC;IACT,IAAIuB,aAAA,CAAcL,MAAA,EAAQ;MACxBb,UAAA,CAAW,YAAM;QACfD,aAAA,CAAc,YAAM;UAClBmB,aAAA,CAAcC,OAAA,CAAQ,UAACrB,QAAA,EAAa;YAClCD,QAAA,CAASC,QAAQ;UACnB,CAAC;QACH,CAAC;MACH,CAAC;IACH;EACF;EAMA,IAAMsB,iBAAA,GAAoB,SAApBA,kBAAqBhB,EAAA,EAAuB;IAChDP,QAAA,GAAWO,EAAA;EACb;EAMA,IAAMiB,sBAAA,GAAyB,SAAzBA,uBAA0BjB,EAAA,EAA4B;IAC1DL,aAAA,GAAgBK,EAAA;EAClB;EAEA,OAAO;IACLC,KAAA,EAAAA,KAAA;IACAK,UAAA,EAAAA,UAAA;IACAF,QAAA,EAAAA,QAAA;IACAY,iBAAA,EAAAA,iBAAA;IACAC,sBAAA,EAAAA,sBAAA;IACAlB,YAAA,EAAAA;EACF;AACF;AAGO,IAAMmB,aAAA,GAAgB5B,mBAAA,EAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}